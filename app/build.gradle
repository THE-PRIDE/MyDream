apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.dream.lmy.mydream"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    buildToolsVersion '28.0.3'

    repositories {
        flatDir {
            dirs 'libs'
            //第三方工程中有引用aar，需加上此行代码
//            dirs project(':csiibbg').file('libs'),'libs'
        }
    }

//    repositories {
////            …………
//        flatDir {
//            //dirs 'libs','../模块名/libs'  
////                网上的很多解决方法如上，但是当多个模块重复依赖的时候，仍然出现找不到aar的情况，根本的解决方式如下：
//            dirs project(':csiibbg').file('libs'),'libs'// 直接用模块的相对路径，这样是绝对准确的
//            }
//    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    implementation 'io.reactivex.rxjava2:rxjava:2.1.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    compileOnly 'com.squareup.retrofit2:retrofit:2.0.2'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation files('libs/converter-gson-2.3.0.jar')
    //    implementation files('libs/retrofit-2.3.0.jar')
    implementation 'org.litepal.android:java:3.0.0'
    implementation 'com.android.databinding:library:3.4.0'
    implementation 'com.android.databinding:adapters:3.4.0'
    //    implementation 'androidx.viewpager2:viewpager2:1.0.0-alpha01'
    implementation files('libs/api-82.jar')
    //    implementation(name: 'MADCore_release', ext: 'aar')
}
